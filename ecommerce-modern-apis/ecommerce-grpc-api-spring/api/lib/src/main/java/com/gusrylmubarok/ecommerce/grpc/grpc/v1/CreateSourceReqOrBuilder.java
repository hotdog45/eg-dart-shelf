// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PaymentGatewayService.proto

package com.gusrylmubarok.ecommerce.grpc.grpc.v1;

public interface CreateSourceReqOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.gusrylmubarok.v1.CreateSourceReq)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The type of the source to create. Required unless customer and original_source are specified
   * </pre>
   *
   * <code>string type = 1;</code>
   * @return The type.
   */
  java.lang.String getType();
  /**
   * <pre>
   * The type of the source to create. Required unless customer and original_source are specified
   * </pre>
   *
   * <code>string type = 1;</code>
   * @return The bytes for type.
   */
  com.google.protobuf.ByteString
      getTypeBytes();

  /**
   * <pre>
   * Optional. Amount associated with the source. This is the amount for which the source will be
   * chargeable once ready. Required for single_use sources. Not supported for receiver type
   * sources, where charge amount may not be specified until funds land.
   * </pre>
   *
   * <code>uint32 amount = 2;</code>
   * @return The amount.
   */
  int getAmount();

  /**
   * <pre>
   * Optional
   * </pre>
   *
   * <code>string currency = 3;</code>
   * @return The currency.
   */
  java.lang.String getCurrency();
  /**
   * <pre>
   * Optional
   * </pre>
   *
   * <code>string currency = 3;</code>
   * @return The bytes for currency.
   */
  com.google.protobuf.ByteString
      getCurrencyBytes();

  /**
   * <pre>
   * Optional. Info about the owner of the payment instrument that may be used or required by particular source types.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Owner owner = 4;</code>
   * @return Whether the owner field is set.
   */
  boolean hasOwner();
  /**
   * <pre>
   * Optional. Info about the owner of the payment instrument that may be used or required by particular source types.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Owner owner = 4;</code>
   * @return The owner.
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.Owner getOwner();
  /**
   * <pre>
   * Optional. Info about the owner of the payment instrument that may be used or required by particular source types.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Owner owner = 4;</code>
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.OwnerOrBuilder getOwnerOrBuilder();

  /**
   * <pre>
   * Extra information about a source. This will appear on your customer’s statement every time you charge the source.
   * As an example, if your website is RunClub and the item you’re charging for is a race ticket,
   * you may want to specify a statementDescriptor of RunClub 5K race ticket.
   * While many payment types will display this information, some may not display it at all.
   * </pre>
   *
   * <code>string statementDescriptor = 5;</code>
   * @return The statementDescriptor.
   */
  java.lang.String getStatementDescriptor();
  /**
   * <pre>
   * Extra information about a source. This will appear on your customer’s statement every time you charge the source.
   * As an example, if your website is RunClub and the item you’re charging for is a race ticket,
   * you may want to specify a statementDescriptor of RunClub 5K race ticket.
   * While many payment types will display this information, some may not display it at all.
   * </pre>
   *
   * <code>string statementDescriptor = 5;</code>
   * @return The bytes for statementDescriptor.
   */
  com.google.protobuf.ByteString
      getStatementDescriptorBytes();

  /**
   * <pre>
   * The authentication flow of the source. flow is one of redirect, receiver, codeVerification, none.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Flow flow = 6;</code>
   * @return The enum numeric value on the wire for flow.
   */
  int getFlowValue();
  /**
   * <pre>
   * The authentication flow of the source. flow is one of redirect, receiver, codeVerification, none.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Flow flow = 6;</code>
   * @return The flow.
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.Flow getFlow();

  /**
   * <pre>
   * Optional. Information related to the receiver flow. Present if the source is a receiver (flow is receiver).
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Receiver receiver = 7;</code>
   * @return Whether the receiver field is set.
   */
  boolean hasReceiver();
  /**
   * <pre>
   * Optional. Information related to the receiver flow. Present if the source is a receiver (flow is receiver).
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Receiver receiver = 7;</code>
   * @return The receiver.
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.Receiver getReceiver();
  /**
   * <pre>
   * Optional. Information related to the receiver flow. Present if the source is a receiver (flow is receiver).
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Receiver receiver = 7;</code>
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.ReceiverOrBuilder getReceiverOrBuilder();

  /**
   * <pre>
   * Optional. Either reusable or single_use. Whether this source should be reusable or not.
   * Some source types may or may not be reusable by construction, while others may leave the option
   * at creation. If an incompatible value is passed, an error will be returned.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Usage usage = 8;</code>
   * @return The enum numeric value on the wire for usage.
   */
  int getUsageValue();
  /**
   * <pre>
   * Optional. Either reusable or single_use. Whether this source should be reusable or not.
   * Some source types may or may not be reusable by construction, while others may leave the option
   * at creation. If an incompatible value is passed, an error will be returned.
   * </pre>
   *
   * <code>.com.gusrylmubarok.v1.Usage usage = 8;</code>
   * @return The usage.
   */
  com.gusrylmubarok.ecommerce.grpc.grpc.v1.Usage getUsage();
}
